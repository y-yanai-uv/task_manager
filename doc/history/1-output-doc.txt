# プロジェクト管理システム 開発者ドキュメント

## 概要

このドキュメントでは、プロジェクト管理システムのデータ層の使用方法について説明します。システムはTypeScriptで実装され、LocalStorageを使用してデータを永続化します。

## データモデル

### Project
```typescript
interface Project {
  id: number;
  name: string;
  startDate: string;  // YYYY-MM-DD形式
  endDate: string;    // YYYY-MM-DD形式
  phases: {
    planning: Phase;    // 基本設計
    design: Phase;      // 詳細設計
    development: Phase; // 開発
    testing: Phase;     // テスト
  };
}
```

### Phase
```typescript
interface Phase {
  startDate: string;    // YYYY-MM-DD形式
  endDate: string;      // YYYY-MM-DD形式
  status: 'notStarted' | 'inProgress' | 'completed';
}
```

### Task
```typescript
interface Task {
  id: number;
  title: string;
  projectId: number;
  phaseType: 'planning' | 'design' | 'development' | 'testing';
  status: 'incomplete' | 'complete';
}
```

## APIの使用方法

### コンポーネントでの基本的な使用方法

```typescript
import { useApi } from '../composables/useApi';

export default defineComponent({
  setup() {
    const api = useApi();
    
    // APIメソッドを使用してデータを操作
    const loadProjects = async () => {
      const projects = await api.getProjects();
      // ...
    };
    
    return { loadProjects };
  }
});
```

### プロジェクト操作

#### プロジェクト一覧の取得
```typescript
const projects = await api.getProjects();
```

#### 単一プロジェクトの取得
```typescript
const project = await api.getProject(projectId);
```

#### プロジェクトの作成
```typescript
const newProject = await api.createProject({
  name: "新規プロジェクト",
  startDate: "2024-01-01",
  endDate: "2024-12-31",
  phases: {
    planning: {
      startDate: "2024-01-01",
      endDate: "2024-03-31",
      status: "notStarted"
    },
    design: {
      startDate: "2024-04-01",
      endDate: "2024-06-30",
      status: "notStarted"
    },
    development: {
      startDate: "2024-07-01",
      endDate: "2024-09-30",
      status: "notStarted"
    },
    testing: {
      startDate: "2024-10-01",
      endDate: "2024-12-31",
      status: "notStarted"
    }
  }
});
```

#### プロジェクトの更新
```typescript
const updatedProject = await api.updateProject(projectId, {
  name: "更新後のプロジェクト名"
});
```

#### プロジェクトの削除
```typescript
const success = await api.deleteProject(projectId);
```

### タスク操作

#### プロジェクトのタスク一覧取得
```typescript
const tasks = await api.getTasks(projectId);
```

#### フェーズ別タスク一覧取得
```typescript
const planningTasks = await api.getProjectPhaseTasks(projectId, 'planning');
```

#### タスクの作成
```typescript
const newTask = await api.createTask({
  title: "新規タスク",
  projectId: 1,
  phaseType: "planning",
  status: "incomplete"
});
```

#### タスクの更新
```typescript
const updatedTask = await api.updateTask(taskId, {
  status: "complete"
});
```

#### タスクの削除
```typescript
const success = await api.deleteTask(taskId);
```

## 実装例

### プロジェクト一覧ページの実装例

```vue
<template>
  <div>
    <h1>プロジェクト一覧</h1>
    <div v-for="project in projects" :key="project.id">
      <h2>{{ project.name }}</h2>
      <p>期間: {{ project.startDate }} 〜 {{ project.endDate }}</p>
      <button @click="deleteProject(project.id)">削除</button>
    </div>
  </div>
</template>

<script lang="ts">
import { defineComponent, onMounted, ref } from 'vue';
import { useApi } from '../composables/useApi';
import { Project } from '../types';

export default defineComponent({
  setup() {
    const api = useApi();
    const projects = ref<Project[]>([]);

    const loadProjects = async () => {
      projects.value = await api.getProjects();
    };

    const deleteProject = async (id: number) => {
      await api.deleteProject(id);
      await loadProjects();
    };

    onMounted(loadProjects);

    return {
      projects,
      deleteProject
    };
  }
});
</script>
```

### プロジェクト詳細ページの実装例

```vue
<template>
  <div v-if="project">
    <h1>{{ project.name }}</h1>
    
    <!-- フェーズ情報 -->
    <div class="phases">
      <div v-for="(phase, type) in project.phases" :key="type">
        <h3>{{ phaseNames[type] }}</h3>
        <p>状態: {{ phase.status }}</p>
        <p>期間: {{ phase.startDate }} 〜 {{ phase.endDate }}</p>
        
        <!-- フェーズのタスク一覧 -->
        <div class="tasks">
          <h4>タスク一覧</h4>
          <div v-for="task in phaseTasks[type]" :key="task.id">
            <input
              type="checkbox"
              :checked="task.status === 'complete'"
              @change="updateTaskStatus(task.id, task.status === 'complete' ? 'incomplete' : 'complete')"
            >
            {{ task.title }}
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script lang="ts">
import { defineComponent, onMounted, ref } from 'vue';
import { useApi } from '../composables/useApi';
import { Project, Task, PhaseType } from '../types';

export default defineComponent({
  props: {
    projectId: {
      type: Number,
      required: true
    }
  },
  
  setup(props) {
    const api = useApi();
    const project = ref<Project | undefined>();
    const phaseTasks = ref<Record<PhaseType, Task[]>>({
      planning: [],
      design: [],
      development: [],
      testing: []
    });

    const phaseNames = {
      planning: '基本設計',
      design: '詳細設計',
      development: '開発',
      testing: 'テスト'
    };

    const loadProject = async () => {
      project.value = await api.getProject(props.projectId);
    };

    const loadTasks = async () => {
      for (const phase of Object.keys(phaseTasks.value) as PhaseType[]) {
        phaseTasks.value[phase] = await api.getProjectPhaseTasks(props.projectId, phase);
      }
    };

    const updateTaskStatus = async (taskId: number, status: 'complete' | 'incomplete') => {
      await api.updateTask(taskId, { status });
      await loadTasks();
    };

    onMounted(async () => {
      await loadProject();
      await loadTasks();
    });

    return {
      project,
      phaseTasks,
      phaseNames,
      updateTaskStatus
    };
  }
});
</script>
```

## エラーハンドリング

各APIメソッドは、操作が失敗した場合にundefinedまたはfalseを返します。
コンポーネント側で適切にエラーハンドリングを実装することを推奨します。

```typescript
try {
  const project = await api.getProject(projectId);
  if (!project) {
    // プロジェクトが見つからない場合の処理
    return;
  }
  // 正常系の処理
} catch (error) {
  // エラー処理
  console.error('Failed to load project:', error);
}
```