# プロジェクト管理システム 実装仕様書

## 共通事項
- 実装言語: Vue + TypeScript
- バリデーションとエラーハンドリングは実装不要
- 1ページ1コンポーネントで実装（コンポーネントの分割不要）

## データ型定義

```typescript
interface Project {
  id: number;
  name: string;
  startDate: string;  // YYYY-MM-DD形式
  endDate: string;    // YYYY-MM-DD形式
  phases: {
    planning: Phase;    // 基本設計
    design: Phase;      // 詳細設計
    development: Phase; // 開発
    testing: Phase;     // テスト
  };
}

interface Phase {
  startDate: string;    // YYYY-MM-DD形式
  endDate: string;      // YYYY-MM-DD形式
  status: 'notStarted' | 'inProgress' | 'completed';  // 未着手・進行中・完了
}

interface Task {
  id: number;
  title: string;
  projectId: number;
  phaseType: 'planning' | 'design' | 'development' | 'testing';
  status: 'incomplete' | 'complete';  // 未完了・完了
}
```

## ページ別実装仕様

### 1. プロジェクト一覧ページ
- パス: `/projects`
- コンポーネント名: `ProjectListView`
- 実装要件:
  - プロジェクト一覧をテーブル形式で表示
  - 各プロジェクトの基本情報（名前、期間）を表示。
  - 各フェーズのステータスを色分けして表示
  - プロジェクトの新規作成機能
  - プロジェクト情報の編集機能
  - 各フェーズのステータス変更機能

### 2. カレンダーページ
- パス: `/calendar`
- コンポーネント名: `CalendarView`
- 実装要件:
  - 月単位でのカレンダー表示
  - 各プロジェクトのフェーズを期間に応じてカレンダー上に表示
  - フェーズはプロジェクト名とフェーズ名を表示
  - ステータスに応じて背景色を変更
  - 月の切り替え機能
  - カレンダー上のフェーズをクリックでステータス変更可能

### 3. タスク一覧ページ
- パス: `/tasks`
- コンポーネント名: `TaskListView`
- 実装要件:
  - タスク一覧をテーブル形式で表示
  - タスクの新規作成機能
    - プロジェクトとフェーズの選択機能を含む
  - タスクのステータス変更機能（完了・未完了の切り替え）
  - プロジェクト名でのフィルタリング機能
  - フェーズでのフィルタリング機能
  - タスクのステータスでのフィルタリング機能

## データ管理層の実装仕様

### データストア設計
- Vuexを使用したステート管理
- 以下のモジュールを実装:
  - projects: プロジェクト一覧の管理
  - tasks: タスク一覧の管理

### 提供する機能
- プロジェクトのCRUD操作
- フェーズのステータス更新
- タスクのCRUD操作
- タスクのステータス更新
- フィルタリング機能の提供

### 想定されるVuexアクション
```typescript
// プロジェクト関連
createProject(project: Project): void
updateProject(project: Project): void
updatePhaseStatus(projectId: number, phaseType: string, status: string): void

// タスク関連
createTask(task: Task): void
updateTaskStatus(taskId: number, status: string): void
getFilteredTasks(filters: TaskFilters): Task[]
```