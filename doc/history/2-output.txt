プロジェクト一覧ページを実装します。コードが長くなるため、アーティファクトとして提供します。



```vue
<script setup lang="ts">
import { ref, onMounted } from 'vue'
import { useApi } from '../composables/useApi'
import type { Project, Phase } from '../types'

const api = useApi()
const projects = ref<Project[]>([])
const showCreateModal = ref(false)
const showEditModal = ref(false)
const editingProject = ref<Project | null>(null)

// 新規プロジェクト用のデータ
const newProject = ref({
  name: '',
  startDate: '',
  endDate: '',
  phases: {
    planning: { startDate: '', endDate: '', status: 'notStarted' as const },
    design: { startDate: '', endDate: '', status: 'notStarted' as const },
    development: { startDate: '', endDate: '', status: 'notStarted' as const },
    testing: { startDate: '', endDate: '', status: 'notStarted' as const }
  }
})

// プロジェクト一覧の取得
const loadProjects = async () => {
  const result = await api.getProjects()
  if (result) {
    projects.value = result
  }
}

// プロジェクトの作成
const createProject = async () => {
  await api.createProject(newProject.value)
  showCreateModal.value = false
  resetNewProject()
  await loadProjects()
}

// プロジェクトの更新
const updateProject = async () => {
  if (editingProject.value) {
    await api.updateProject(editingProject.value.id, editingProject.value)
    showEditModal.value = false
    editingProject.value = null
    await loadProjects()
  }
}

// プロジェクトの削除
const deleteProject = async (projectId: number) => {
  if (confirm('このプロジェクトを削除してもよろしいですか？')) {
    await api.deleteProject(projectId)
    await loadProjects()
  }
}

// フェーズのステータス更新
const updatePhaseStatus = async (project: Project, phaseKey: keyof typeof project.phases) => {
  const phase = project.phases[phaseKey]
  const statusMap = {
    notStarted: 'inProgress',
    inProgress: 'completed',
    completed: 'notStarted'
  } as const
  
  const updatedProject = {
    ...project,
    phases: {
      ...project.phases,
      [phaseKey]: {
        ...phase,
        status: statusMap[phase.status]
      }
    }
  }
  
  await api.updateProject(project.id, updatedProject)
  await loadProjects()
}

// 編集モーダルを開く
const openEditModal = (project: Project) => {
  editingProject.value = JSON.parse(JSON.stringify(project))
  showEditModal.value = true
}

// 新規プロジェクトデータのリセット
const resetNewProject = () => {
  newProject.value = {
    name: '',
    startDate: '',
    endDate: '',
    phases: {
      planning: { startDate: '', endDate: '', status: 'notStarted' },
      design: { startDate: '', endDate: '', status: 'notStarted' },
      development: { startDate: '', endDate: '', status: 'notStarted' },
      testing: { startDate: '', endDate: '', status: 'notStarted' }
    }
  }
}

// フェーズのステータスに応じた背景色を返す
const getStatusColor = (status: Phase['status']) => {
  switch (status) {
    case 'notStarted':
      return 'bg-gray-200'
    case 'inProgress':
      return 'bg-blue-200'
    case 'completed':
      return 'bg-green-200'
    default:
      return 'bg-white'
  }
}

onMounted(loadProjects)
</script>

<template>
  <div class="container mx-auto px-4 py-8">
    <div class="flex justify-between items-center mb-6">
      <h1 class="text-2xl font-bold">プロジェクト一覧</h1>
      <button
        @click="showCreateModal = true"
        class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded"
      >
        新規プロジェクト
      </button>
    </div>

    <!-- プロジェクト一覧テーブル -->
    <div class="overflow-x-auto">
      <table class="min-w-full bg-white border border-gray-200">
        <thead>
          <tr>
            <th class="px-4 py-2 border">プロジェクト名</th>
            <th class="px-4 py-2 border">期間</th>
            <th class="px-4 py-2 border">基本設計</th>
            <th class="px-4 py-2 border">詳細設計</th>
            <th class="px-4 py-2 border">開発</th>
            <th class="px-4 py-2 border">テスト</th>
            <th class="px-4 py-2 border">操作</th>
          </tr>
        </thead>
        <tbody>
          <tr v-for="project in projects" :key="project.id">
            <td class="px-4 py-2 border">{{ project.name }}</td>
            <td class="px-4 py-2 border">
              {{ project.startDate }} 〜 {{ project.endDate }}
            </td>
            <td
              v-for="(phase, key) in project.phases"
              :key="key"
              class="px-4 py-2 border cursor-pointer"
              :class="getStatusColor(phase.status)"
              @click="updatePhaseStatus(project, key)"
            >
              {{ phase.status }}
            </td>
            <td class="px-4 py-2 border">
              <button
                @click="openEditModal(project)"
                class="text-blue-500 hover:text-blue-600 mr-2"
              >
                編集
              </button>
              <button
                @click="deleteProject(project.id)"
                class="text-red-500 hover:text-red-600"
              >
                削除
              </button>
            </td>
          </tr>
        </tbody>
      </table>
    </div>

    <!-- 新規プロジェクト作成モーダル -->
    <div v-if="showCreateModal" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
      <div class="bg-white p-6 rounded-lg w-full max-w-2xl">
        <h2 class="text-xl font-bold mb-4">新規プロジェクト作成</h2>
        <div class="space-y-4">
          <div>
            <label class="block mb-1">プロジェクト名</label>
            <input
              v-model="newProject.name"
              type="text"
              class="w-full border rounded px-2 py-1"
            >
          </div>
          <div class="grid grid-cols-2 gap-4">
            <div>
              <label class="block mb-1">開始日</label>
              <input
                v-model="newProject.startDate"
                type="date"
                class="w-full border rounded px-2 py-1"
              >
            </div>
            <div>
              <label class="block mb-1">終了日</label>
              <input
                v-model="newProject.endDate"
                type="date"
                class="w-full border rounded px-2 py-1"
              >
            </div>
          </div>
          <div v-for="(phase, key) in newProject.phases" :key="key" class="grid grid-cols-2 gap-4">
            <div>
              <label class="block mb-1">{{ key }} 開始日</label>
              <input
                v-model="phase.startDate"
                type="date"
                class="w-full border rounded px-2 py-1"
              >
            </div>
            <div>
              <label class="block mb-1">{{ key }} 終了日</label>
              <input
                v-model="phase.endDate"
                type="date"
                class="w-full border rounded px-2 py-1"
              >
            </div>
          </div>
        </div>
        <div class="flex justify-end space-x-2 mt-4">
          <button
            @click="showCreateModal = false"
            class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded"
          >
            キャンセル
          </button>
          <button
            @click="createProject"
            class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded"
          >
            作成
          </button>
        </div>
      </div>
    </div>

    <!-- プロジェクト編集モーダル -->
    <div v-if="showEditModal && editingProject" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
      <div class="bg-white p-6 rounded-lg w-full max-w-2xl">
        <h2 class="text-xl font-bold mb-4">プロジェクト編集</h2>
        <div class="space-y-4">
          <div>
            <label class="block mb-1">プロジェクト名</label>
            <input
              v-model="editingProject.name"
              type="text"
              class="w-full border rounded px-2 py-1"
            >
          </div>
          <div class="grid grid-cols-2 gap-4">
            <div>
              <label class="block mb-1">開始日</label>
              <input
                v-model="editingProject.startDate"
                type="date"
                class="w-full border rounded px-2 py-1"
              >
            </div>
            <div>
              <label class="block mb-1">終了日</label>
              <input
                v-model="editingProject.endDate"
                type="date"
                class="w-full border rounded px-2 py-1"
              >
            </div>
          </div>
          <div v-for="(phase, key) in editingProject.phases" :key="key" class="grid grid-cols-2 gap-4">
            <div>
              <label class="block mb-1">{{ key }} 開始日</label>
              <input
                v-model="phase.startDate"
                type="date"
                class="w-full border rounded px-2 py-1"
              >
            </div>
            <div>
              <label class="block mb-1">{{ key }} 終了日</label>
              <input
                v-model="phase.endDate"
                type="date"
                class="w-full border rounded px-2 py-1"
              >
            </div>
          </div>
        </div>
        <div class="flex justify-end space-x-2 mt-4">
          <button
            @click="showEditModal = false"
            class="bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded"
          >
            キャンセル
          </button>
          <button
            @click="updateProject"
            class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded"
          >
            更新
          </button>
        </div>
      </div>
    </div>
  </div>
</template>

```

実装したコンポーネントの主な特徴は以下の通りです：

1. Composition APIとscript setupを使用したモダンな実装
2. データ管理層のAPIのみを使用した実装
3. 以下の機能を実装
   - プロジェクト一覧の表示
   - プロジェクトの新規作成
   - プロジェクトの編集
   - プロジェクトの削除
   - フェーズのステータス変更（クリックで切り替え）
4. TailwindCSSを使用したレスポンシブなデザイン
   - テーブルのオーバーフロー対応
   - モーダルの実装
   - ステータスに応じた色分け
5. TypeScriptによる型安全な実装

このコンポーネントをご利用いただくには、以下の点にご注意ください：

1. `useApi` composableが実装されている必要があります
2. 必要なTypeScriptの型定義がプロジェクト内に存在する必要があります
3. TailwindCSSの設定が適切に行われている必要があります

必要に応じて、さらなる機能の追加や UI の調整が可能です。